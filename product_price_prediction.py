# -*- coding: utf-8 -*-
"""product_price_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LVqMqy0atsHmoMzfSJgtcctf5PRU_wx4
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

train_df=pd.read_csv('/content/train.csv')
test_df=pd.read_csv('/content/test.csv')

df.head()

df.info()

df.isnull().sum()

df.describe()

"""Data Preprocessing
Handle missing values
  numeriacal-fill with mean/median
  categorical-fill with unkown

"""

from sklearn.preprocessing import StandardScaler,OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor # Corrected typo
from sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score

df=df[df['Selling_Price'].notnull()]

# Drop rows with missing Selling_Price (since this is your target)
df = df[df['Selling_Price'].notnull()]

# Fill Stall_no with mode
df['Stall_no'].fillna(df['Stall_no'].mode()[0], inplace=True)

# Fill Customer_name with placeholder or drop (if not useful)
df['Customer_name'].fillna('Unknown', inplace=True)

# Discount_avail (Yes/No) — mode
df['Discount_avail'].fillna(df['Discount_avail'].mode()[0], inplace=True)

# Numerical columns — fill with median
for col in ['charges_1', 'charges_2 (%)', 'Minimum_price', 'Maximum_price']:
    df[col].fillna(df[col].median(), inplace=True)

X=df.drop(['Selling_Price','Product_id'],axis=1)
y=df['Selling_Price']


# Step 6: Identify column types
categorical_cols = X.select_dtypes(include=['object']).columns.tolist()
numerical_cols = X.select_dtypes(include=['int64', 'float64']).columns.tolist()

numeric_transformer=Pipeline(steps=[
    ('imputer',SimpleImputer(strategy='median')),
    ('scaler',StandardScaler())
])

categorical_transformer=Pipeline(steps=[
    ('imputer',SimpleImputer(strategy='most_frequent')),
    ('encoder',OneHotEncoder(handle_unknown='ignore'))
])

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numerical_cols),
        ('cat', categorical_transformer, categorical_cols)
    ]
)

# Step 8: Combine with model
model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor(random_state=42))
])

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)
model.fit(X_train,y_train)

y_pred=model.predict(X_test)


print("MAE:", mean_absolute_error(y_test, y_pred))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))
print("R² Score:", r2_score(y_test, y_pred))

def preprocess(df):
    df['Stall_no'].fillna(df['Stall_no'].mode()[0], inplace=True)
    df['Customer_name'].fillna("Unknown", inplace=True)
    df['Discount_avail'].fillna(df['Discount_avail'].mode()[0], inplace=True)

    for col in ['charges_1', 'charges_2 (%)', 'Minimum_price', 'Maximum_price']:
        df[col].fillna(df[col].median(), inplace=True)

    df['instock_date'] = pd.to_datetime(df['instock_date'])
    df['instock_month'] = df['instock_date'].dt.month
    df['instock_day'] = df['instock_date'].dt.day
    df['instock_year'] = df['instock_date'].dt.year
    df.drop(['instock_date', 'Product_id'], axis=1, inplace=True)

    return df

# Drop target nulls in training data
train_df = train_df[train_df['Selling_Price'].notnull()]
train_df = preprocess(train_df)
test_df = preprocess(test_df)

X_train = train_df.drop("Selling_Price", axis=1)
y_train = train_df["Selling_Price"]

X_test = test_df  # No target in test set

from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.ensemble import RandomForestRegressor
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, OneHotEncoder

# Column types
categorical_cols = X_train.select_dtypes(include='object').columns.tolist()
numerical_cols = X_train.select_dtypes(include=['int64', 'float64']).columns.tolist()

# Pipelines
num_pipeline = Pipeline([
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', StandardScaler())
])

cat_pipeline = Pipeline([
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('encoder', OneHotEncoder(handle_unknown='ignore'))
])

preprocessor = ColumnTransformer([
    ('num', num_pipeline, numerical_cols),
    ('cat', cat_pipeline, categorical_cols)
])

# Final pipeline with model
model = Pipeline([
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor(random_state=42))
])

# Train model
model.fit(X_train, y_train)

y_pred_test = model.predict(X_test)

output = pd.DataFrame({
    'Predicted_Selling_Price': y_pred_test
})

output.to_csv("predicted_prices.csv", index=False)

